#include <bits/stdc++.h>
using namespace std;

#define ll long long

// Gets the minimum deletions given initial mood:
ll getDeleted(vector<ll>& arr, ll q) {
  priority_queue<ll, vector<ll>, greater<ll>> pq;
  ll deleted = 0, mood = q;
  for (ll num : arr) {
    mood += num;
    pq.push(num);
    if (mood < 0) {
      ++deleted;
      mood -= pq.top();
      pq.pop();
    }
  }
  return deleted;
}

int main() {
  int n, m; cin >> n >> m;
  vector<ll> arr(n); for (int i = 0; i < n; ++i) cin >> arr[i];
  vector<ll> qs(m); for (int i = 0; i < m; ++i) cin >> qs[i];
  vector<ll> sorted = qs; sort(sorted.begin(), sorted.end());
  // Binary searches for the minimum initial mood for each number of deletions:
  vector<int> minQ(n + 1);
  for (int i = 0; i <= n; ++i) {
    ll lo = -1, hi = m;
    while (lo < hi - 1) {
      ll mid = (lo + hi) / 2, del = getDeleted(arr, sorted[mid]);
      if (del > i) lo = mid;
      else hi = mid;
    }
    minQ[i] = hi;
  }
  // Finds answer:
  for (ll query : qs) {
    for (int j = 0; j <= n; ++j) {
      if (minQ[j] == m) continue;
      if (sorted[minQ[j]] <= query) {
        // Output:
        cout << j << endl;
        break;
      }
    }
  }        
  return 0;
}
